<?php namespace SmashPig\PaymentProviders\Amazon\ExpatriatedMessages;

use SmashPig\Core\UtcDate;
use SmashPig\PaymentProviders\Amazon\RecordPaymentJob;

abstract class PaymentCapture extends AmazonMessage {

	/**
	 * @var string For donations captured on payments-wiki, this is the
	 * ct_id, a dash, and a sequence number. For donations started on
	 * payments-wiki but captured via the Amazon console, this is
	 * "AUTHORIZE_" plus a random number (see ReconstructMerchantReference).
	 * Finally, for Alexa donations this is a very long random number.
	 */
	protected $order_id;
	protected $contribution_tracking_id;
	protected $fee;
	protected $gateway_status;

	public function __construct( $values ) {
		parent::__construct();
		$details = $values['CaptureDetails'];

		$this->setGatewayIds( $details['AmazonCaptureId'] );

		$captureReferenceId = $details['CaptureReferenceId'];

		$this->setOrderId( $captureReferenceId );

		$this->date = UtcDate::getUtcTimestamp( $details['CreationTimestamp'] );

		$this->currency = $details['CaptureAmount']['CurrencyCode'];
		$this->gross = $details['CaptureAmount']['Amount'];
		$this->fee = $details['CaptureFee']['Amount'];

		$this->gateway_status = $details['CaptureStatus']['State'];
	}

	/**
	 * Add fields specific to donation messages
	 *
	 * @return array
	 */
	public function normalizeForQueue() {
		$payload = $this->getPayload();
		$jobMessage = RecordPaymentJob::fromAmazonMessage( $payload );

		return $jobMessage;
	}

	public function getPayload() {
		$payload = parent::normalizeForQueue();

		$payload = array_merge(
			$payload,
			[
				'currency' => $this->currency,
				'date' => $this->date,
				'gateway_status' => $this->gateway_status,
				'gateway_txn_id' => $this->gateway_txn_id,
				'order_id' => $this->order_id,
				'payment_method' => 'amazon',
				'fee' => $this->fee,
				'order_reference_id' => $this->getOrderReferenceId()
			]
		);
		if ( $this->contribution_tracking_id ) {
			$payload['contribution_tracking_id'] = $this->contribution_tracking_id;
		}
		return $payload;
	}

	/**
	 * Set fields derived from the order ID
	 *
	 * @param string $orderId
	 */
	public function setOrderId( $orderId ) {
		$this->order_id = $orderId;

		$parts = explode( '-', $orderId );
		if (
			count( $parts ) === 2 &&
			is_numeric( $parts[0] ) &&
			is_numeric( $parts[1] )
		) {
			// Only set ct_id when the order ID was generated by our frontend
			$this->contribution_tracking_id = $parts[0];
		}
	}

	/**
	 * @return string
	 */
	public function getOrderId() {
		return $this->order_id;
	}
}
